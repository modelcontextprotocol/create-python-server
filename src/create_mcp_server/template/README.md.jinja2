# {{server_name}} MCP server

{{server_description}}

## Components

### Resources

Implement the `handle_list_resources()` and `handle_read_resource()` methods to expose and read resources.

### Prompts

Implement the `handle_list_prompts()` and `handle_get_prompt()` methods to expose and generate prompts.

### Tools

Implement the `handle_list_tools()` and `handle_call_tool()` methods to expose and execute tools.

## Configuration

[TODO: Add configuration details specific to your implementation]

## Quickstart

### Install

#### Claude Desktop

On MacOS: `~/Library/Application\ Support/Claude/claude_desktop_config.json`
On Windows: `%APPDATA%/Claude/claude_desktop_config.json`

<details>
  <summary>Development/Unpublished Servers Configuration</summary>
  ```
  "mcpServers": {
    "{{server_name}}": {
      "command": "uv",
      "args": [
        "--directory",
        "{{server_directory}}",
        "run",
        "{{server_name}}"
      ]
    }
  }
  ```
</details>

<details>
  <summary>Published Servers Configuration</summary>
  ```
  "mcpServers": {
    "{{server_name}}": {
      "command": "uvx",
      "args": [
        "{{server_name}}"
      ]
    }
  }
  ```
</details>

## Development

### Building and Publishing

To prepare the package for distribution:

1. Sync dependencies and update lockfile:
```bash
uv sync
```

2. Build package distributions:
```bash
uv build
```

This will create source and wheel distributions in the `dist/` directory.

3. Publish to PyPI:
```bash
uv publish
```

Note: You'll need to set PyPI credentials via environment variables or command flags:
- Token: `--token` or `UV_PUBLISH_TOKEN`
- Or username/password: `--username`/`UV_PUBLISH_USERNAME` and `--password`/`UV_PUBLISH_PASSWORD`

### Debugging

Since MCP servers run over stdio, debugging can be challenging. For the best debugging
experience, we strongly recommend using the [MCP Inspector](https://github.com/modelcontextprotocol/inspector).

{% if binary_name %}
You can launch the MCP Inspector via [`npm`](https://docs.npmjs.com/downloading-and-installing-node-js-and-npm) with this command:

```bash
npx @modelcontextprotocol/inspector uv --directory {{server_directory}} run {{binary_name}}
```
{% else %}
This project does not contain a script to start. However, you can still use the MCP Inspector for debugging. To start the inspector, use the following general command structure:

```bash
npx @modelcontextprotocol/inspector <command-to-run-your-server>
```

Replace `<command-to-run-your-server>` with the specific command you use to start your MCP server.
{% endif %}

Upon launching, the Inspector will display a URL that you can access in your browser to begin debugging.
