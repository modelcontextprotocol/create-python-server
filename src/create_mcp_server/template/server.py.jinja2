import asyncio

from mcp.server.models import InitializationOptions
import mcp.types as types
from mcp.server import NotificationOptions, Server
import mcp.server.stdio

server = Server("{{server_name}}")

@server.list_resources()
async def handle_list_resources() -> list[types.Resource]:
    """List available resources.
    
    Example return value:
    [
        types.Resource(
            uri=AnyUrl("resource://example"),
            name="Example Resource",
            description="An example resource",
            mimeType="text/plain"
        )
    ]
    """
    return []

@server.list_prompts()
async def handle_list_prompts() -> list[types.Prompt]:
    """List available prompts.
    
    Example return value:
    [
        types.Prompt(
            name="example-prompt",
            description="An example prompt",
            arguments=[
                types.PromptArgument(
                    name="style",
                    description="Style of the prompt",
                    required=False
                )
            ]
        )
    ]
    """
    return []

@server.list_tools()
async def handle_list_tools() -> list[types.Tool]:
    """List available tools.
    
    Example return value:
    [
        types.Tool(
            name="example-tool",
            description="An example tool",
            inputSchema={
                "type": "object",
                "properties": {
                    "name": {"type": "string"},
                    "value": {"type": "string"}
                },
                "required": ["name", "value"]
            }
        )
    ]
    """
    return []

async def main():
    # Run the server using stdin/stdout streams
    async with mcp.server.stdio.stdio_server() as (read_stream, write_stream):
        await server.run(
            read_stream,
            write_stream,
            InitializationOptions(
                server_name="{{server_name}}",
                server_version="{{server_version}}",
                capabilities=server.get_capabilities(
                    notification_options=NotificationOptions(),
                    experimental_capabilities={},
                ),
            ),
        )